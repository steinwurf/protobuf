// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: src.proto
// Protobuf C++ Version: 6.31.0

#ifndef src_2eproto_2epb_2eh
#define src_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_src_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_src_2eproto;
}  // extern "C"
namespace protobuf {
enum Kind : int;
extern const uint32_t Kind_internal_data_[];
enum Type : int;
extern const uint32_t Type_internal_data_[];
class Info;
struct InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Info_class_data_;
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Metric_class_data_;
class Metrics;
struct MetricsDefaultTypeInternal;
extern MetricsDefaultTypeInternal _Metrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Metrics_class_data_;
}  // namespace protobuf
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::protobuf::Kind_internal_data_>
    internal::EnumTraitsImpl::value<::protobuf::Kind>;
template <>
internal::EnumTraitsT<::protobuf::Type_internal_data_>
    internal::EnumTraitsImpl::value<::protobuf::Type>;
}  // namespace protobuf
}  // namespace google

namespace protobuf {
enum Kind : int {
  COUNTER = 0,
  CONSTANT = 1,
  GAUGE = 2,
  Kind_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Kind_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Kind_internal_data_[];
inline constexpr Kind Kind_MIN =
    static_cast<Kind>(0);
inline constexpr Kind Kind_MAX =
    static_cast<Kind>(2);
inline bool Kind_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Kind_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Kind_descriptor();
template <typename T>
const ::std::string& Kind_Name(T value) {
  static_assert(::std::is_same<T, Kind>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Kind_Name().");
  return Kind_Name(static_cast<Kind>(value));
}
template <>
inline const ::std::string& Kind_Name(Kind value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Kind_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Kind_Parse(
    ::absl::string_view name, Kind* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Kind>(Kind_descriptor(), name,
                                           value);
}
enum Type : int {
  UINT64 = 0,
  INT64 = 1,
  FLOAT64 = 2,
  BOOL = 3,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Type_internal_data_[];
inline constexpr Type Type_MIN =
    static_cast<Type>(0);
inline constexpr Type Type_MAX =
    static_cast<Type>(3);
inline bool Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int Type_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor();
template <typename T>
const ::std::string& Type_Name(T value) {
  static_assert(::std::is_same<T, Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Type_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool Type_Parse(
    ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(Type_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Info final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf.Info) */ {
 public:
  inline Info() : Info(nullptr) {}
  ~Info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Info* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Info(::google::protobuf::internal::ConstantInitialized);

  inline Info(const Info& from) : Info(nullptr, from) {}
  inline Info(Info&& from) noexcept
      : Info(nullptr, ::std::move(from)) {}
  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info& operator=(Info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Info& default_instance() {
    return *reinterpret_cast<const Info*>(
        &_Info_default_instance_);
  }
  enum MinCase {
    kUint64Min = 6,
    kInt64Min = 7,
    kFloat64Min = 8,
    MIN_NOT_SET = 0,
  };
  enum MaxCase {
    kUint64Max = 9,
    kInt64Max = 10,
    kFloat64Max = 11,
    MAX_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Info& a, Info& b) { a.Swap(&b); }
  inline void Swap(Info* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Info* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Info* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Info& from) { Info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Info* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuf.Info"; }

 protected:
  explicit Info(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Info(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Info& from);
  Info(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Info&& from) noexcept
      : Info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 5,
    kTypeFieldNumber = 3,
    kKindFieldNumber = 4,
    kUint64MinFieldNumber = 6,
    kInt64MinFieldNumber = 7,
    kFloat64MinFieldNumber = 8,
    kUint64MaxFieldNumber = 9,
    kInt64MaxFieldNumber = 10,
    kFloat64MaxFieldNumber = 11,
  };
  // string name = 1;
  void clear_name() ;
  const ::std::string& name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // string description = 2;
  void clear_description() ;
  const ::std::string& description() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_description();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_description();
  void set_allocated_description(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_description() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_description(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_description();

  public:
  // string unit = 5;
  void clear_unit() ;
  const ::std::string& unit() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_unit();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_unit();
  void set_allocated_unit(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_unit() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_unit(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_unit();

  public:
  // .protobuf.Type type = 3;
  void clear_type() ;
  ::protobuf::Type type() const;
  void set_type(::protobuf::Type value);

  private:
  ::protobuf::Type _internal_type() const;
  void _internal_set_type(::protobuf::Type value);

  public:
  // .protobuf.Kind kind = 4;
  void clear_kind() ;
  ::protobuf::Kind kind() const;
  void set_kind(::protobuf::Kind value);

  private:
  ::protobuf::Kind _internal_kind() const;
  void _internal_set_kind(::protobuf::Kind value);

  public:
  // uint64 uint64_min = 6;
  bool has_uint64_min() const;
  void clear_uint64_min() ;
  ::uint64_t uint64_min() const;
  void set_uint64_min(::uint64_t value);

  private:
  ::uint64_t _internal_uint64_min() const;
  void _internal_set_uint64_min(::uint64_t value);

  public:
  // int64 int64_min = 7;
  bool has_int64_min() const;
  void clear_int64_min() ;
  ::int64_t int64_min() const;
  void set_int64_min(::int64_t value);

  private:
  ::int64_t _internal_int64_min() const;
  void _internal_set_int64_min(::int64_t value);

  public:
  // double float64_min = 8;
  bool has_float64_min() const;
  void clear_float64_min() ;
  double float64_min() const;
  void set_float64_min(double value);

  private:
  double _internal_float64_min() const;
  void _internal_set_float64_min(double value);

  public:
  // uint64 uint64_max = 9;
  bool has_uint64_max() const;
  void clear_uint64_max() ;
  ::uint64_t uint64_max() const;
  void set_uint64_max(::uint64_t value);

  private:
  ::uint64_t _internal_uint64_max() const;
  void _internal_set_uint64_max(::uint64_t value);

  public:
  // int64 int64_max = 10;
  bool has_int64_max() const;
  void clear_int64_max() ;
  ::int64_t int64_max() const;
  void set_int64_max(::int64_t value);

  private:
  ::int64_t _internal_int64_max() const;
  void _internal_set_int64_max(::int64_t value);

  public:
  // double float64_max = 11;
  bool has_float64_max() const;
  void clear_float64_max() ;
  double float64_max() const;
  void set_float64_max(double value);

  private:
  double _internal_float64_max() const;
  void _internal_set_float64_max(double value);

  public:
  void clear_min();
  MinCase min_case() const;
  void clear_max();
  MaxCase max_case() const;
  // @@protoc_insertion_point(class_scope:protobuf.Info)
 private:
  class _Internal;
  void set_has_uint64_min();
  void set_has_int64_min();
  void set_has_float64_min();
  void set_has_uint64_max();
  void set_has_int64_max();
  void set_has_float64_max();
  inline bool has_min() const;
  inline void clear_has_min();
  inline bool has_max() const;
  inline void clear_has_max();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 11,
                                   0, 49,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Info& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    int type_;
    int kind_;
    union MinUnion {
      constexpr MinUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint64_t uint64_min_;
      ::int64_t int64_min_;
      double float64_min_;
    } min_;
    union MaxUnion {
      constexpr MaxUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint64_t uint64_max_;
      ::int64_t int64_max_;
      double float64_max_;
    } max_;
    ::uint32_t _oneof_case_[2];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Info_class_data_;
// -------------------------------------------------------------------

class Metric final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metric* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metric));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metric(::google::protobuf::internal::ConstantInitialized);

  inline Metric(const Metric& from) : Metric(nullptr, from) {}
  inline Metric(Metric&& from) noexcept
      : Metric(nullptr, ::std::move(from)) {}
  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *reinterpret_cast<const Metric*>(
        &_Metric_default_instance_);
  }
  enum ValueCase {
    kUint64Value = 2,
    kInt64Value = 3,
    kFloat64Value = 4,
    kBoolValue = 5,
    VALUE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Metric& a, Metric& b) { a.Swap(&b); }
  inline void Swap(Metric* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metric& from) { Metric::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metric* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuf.Metric"; }

 protected:
  explicit Metric(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Metric(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Metric& from);
  Metric(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Metric&& from) noexcept
      : Metric(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfoFieldNumber = 1,
    kUint64ValueFieldNumber = 2,
    kInt64ValueFieldNumber = 3,
    kFloat64ValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
  };
  // optional .protobuf.Info info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::protobuf::Info& info() const;
  [[nodiscard]] ::protobuf::Info* PROTOBUF_NULLABLE release_info();
  ::protobuf::Info* PROTOBUF_NONNULL mutable_info();
  void set_allocated_info(::protobuf::Info* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_info(::protobuf::Info* PROTOBUF_NULLABLE value);
  ::protobuf::Info* PROTOBUF_NULLABLE unsafe_arena_release_info();

  private:
  const ::protobuf::Info& _internal_info() const;
  ::protobuf::Info* PROTOBUF_NONNULL _internal_mutable_info();

  public:
  // uint64 uint64_value = 2;
  bool has_uint64_value() const;
  void clear_uint64_value() ;
  ::uint64_t uint64_value() const;
  void set_uint64_value(::uint64_t value);

  private:
  ::uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(::uint64_t value);

  public:
  // int64 int64_value = 3;
  bool has_int64_value() const;
  void clear_int64_value() ;
  ::int64_t int64_value() const;
  void set_int64_value(::int64_t value);

  private:
  ::int64_t _internal_int64_value() const;
  void _internal_set_int64_value(::int64_t value);

  public:
  // double float64_value = 4;
  bool has_float64_value() const;
  void clear_float64_value() ;
  double float64_value() const;
  void set_float64_value(double value);

  private:
  double _internal_float64_value() const;
  void _internal_set_float64_value(double value);

  public:
  // bool bool_value = 5;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:protobuf.Metric)
 private:
  class _Internal;
  void set_has_uint64_value();
  void set_has_int64_value();
  void set_has_float64_value();
  void set_has_bool_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 5,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Metric& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::protobuf::Info* PROTOBUF_NULLABLE info_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint64_t uint64_value_;
      ::int64_t int64_value_;
      double float64_value_;
      bool bool_value_;
    } value_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Metric_class_data_;
// -------------------------------------------------------------------

class Metrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf.Metrics) */ {
 public:
  inline Metrics() : Metrics(nullptr) {}
  ~Metrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metrics(::google::protobuf::internal::ConstantInitialized);

  inline Metrics(const Metrics& from) : Metrics(nullptr, from) {}
  inline Metrics(Metrics&& from) noexcept
      : Metrics(nullptr, ::std::move(from)) {}
  inline Metrics& operator=(const Metrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metrics& operator=(Metrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metrics& default_instance() {
    return *reinterpret_cast<const Metrics*>(
        &_Metrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Metrics& a, Metrics& b) { a.Swap(&b); }
  inline void Swap(Metrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metrics& from) { Metrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protobuf.Metrics"; }

 protected:
  explicit Metrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Metrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Metrics& from);
  Metrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Metrics&& from) noexcept
      : Metrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricFieldNumber = 2,
    kProtocolVersionFieldNumber = 1,
  };
  // repeated .protobuf.Metric metric = 2;
  int metric_size() const;
  private:
  int _internal_metric_size() const;

  public:
  void clear_metric() ;
  ::protobuf::Metric* PROTOBUF_NONNULL mutable_metric(int index);
  ::google::protobuf::RepeatedPtrField<::protobuf::Metric>* PROTOBUF_NONNULL mutable_metric();

  private:
  const ::google::protobuf::RepeatedPtrField<::protobuf::Metric>& _internal_metric() const;
  ::google::protobuf::RepeatedPtrField<::protobuf::Metric>* PROTOBUF_NONNULL _internal_mutable_metric();
  public:
  const ::protobuf::Metric& metric(int index) const;
  ::protobuf::Metric* PROTOBUF_NONNULL add_metric();
  const ::google::protobuf::RepeatedPtrField<::protobuf::Metric>& metric() const;
  // uint32 protocol_version = 1;
  void clear_protocol_version() ;
  ::uint32_t protocol_version() const;
  void set_protocol_version(::uint32_t value);

  private:
  ::uint32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.Metrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Metrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::protobuf::Metric > metric_;
    ::uint32_t protocol_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Metrics_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Info

// string name = 1;
inline void Info::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Info::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Info.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Info::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Info.name)
}
inline ::std::string* PROTOBUF_NONNULL Info::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protobuf.Info.name)
  return _s;
}
inline const ::std::string& Info::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Info::_internal_set_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Info::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Info::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Info.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Info::set_allocated_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Info.name)
}

// string description = 2;
inline void Info::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Info::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Info.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Info::set_description(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Info.description)
}
inline ::std::string* PROTOBUF_NONNULL Info::mutable_description()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:protobuf.Info.description)
  return _s;
}
inline const ::std::string& Info::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void Info::_internal_set_description(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Info::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Info::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Info.description)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.description_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.description_.Set("", GetArena());
  }
  return released;
}
inline void Info::set_allocated_description(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Info.description)
}

// .protobuf.Type type = 3;
inline void Info::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::protobuf::Type Info::type() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.type)
  return _internal_type();
}
inline void Info::set_type(::protobuf::Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:protobuf.Info.type)
}
inline ::protobuf::Type Info::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protobuf::Type>(_impl_.type_);
}
inline void Info::_internal_set_type(::protobuf::Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .protobuf.Kind kind = 4;
inline void Info::clear_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::protobuf::Kind Info::kind() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.kind)
  return _internal_kind();
}
inline void Info::set_kind(::protobuf::Kind value) {
  _internal_set_kind(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:protobuf.Info.kind)
}
inline ::protobuf::Kind Info::_internal_kind() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protobuf::Kind>(_impl_.kind_);
}
inline void Info::_internal_set_kind(::protobuf::Kind value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kind_ = value;
}

// string unit = 5;
inline void Info::clear_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& Info::unit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Info.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Info::set_unit(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.Info.unit)
}
inline ::std::string* PROTOBUF_NONNULL Info::mutable_unit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:protobuf.Info.unit)
  return _s;
}
inline const ::std::string& Info::_internal_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unit_.Get();
}
inline void Info::_internal_set_unit(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unit_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Info::_internal_mutable_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.unit_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Info::release_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Info.unit)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.unit_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.unit_.Set("", GetArena());
  }
  return released;
}
inline void Info::set_allocated_unit(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Info.unit)
}

// uint64 uint64_min = 6;
inline bool Info::has_uint64_min() const {
  return min_case() == kUint64Min;
}
inline void Info::set_has_uint64_min() {
  _impl_._oneof_case_[0] = kUint64Min;
}
inline void Info::clear_uint64_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (min_case() == kUint64Min) {
    _impl_.min_.uint64_min_ = ::uint64_t{0u};
    clear_has_min();
  }
}
inline ::uint64_t Info::uint64_min() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.uint64_min)
  return _internal_uint64_min();
}
inline void Info::set_uint64_min(::uint64_t value) {
  if (min_case() != kUint64Min) {
    clear_min();
    set_has_uint64_min();
  }
  _impl_.min_.uint64_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Info.uint64_min)
}
inline ::uint64_t Info::_internal_uint64_min() const {
  if (min_case() == kUint64Min) {
    return _impl_.min_.uint64_min_;
  }
  return ::uint64_t{0u};
}

// int64 int64_min = 7;
inline bool Info::has_int64_min() const {
  return min_case() == kInt64Min;
}
inline void Info::set_has_int64_min() {
  _impl_._oneof_case_[0] = kInt64Min;
}
inline void Info::clear_int64_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (min_case() == kInt64Min) {
    _impl_.min_.int64_min_ = ::int64_t{0};
    clear_has_min();
  }
}
inline ::int64_t Info::int64_min() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.int64_min)
  return _internal_int64_min();
}
inline void Info::set_int64_min(::int64_t value) {
  if (min_case() != kInt64Min) {
    clear_min();
    set_has_int64_min();
  }
  _impl_.min_.int64_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Info.int64_min)
}
inline ::int64_t Info::_internal_int64_min() const {
  if (min_case() == kInt64Min) {
    return _impl_.min_.int64_min_;
  }
  return ::int64_t{0};
}

// double float64_min = 8;
inline bool Info::has_float64_min() const {
  return min_case() == kFloat64Min;
}
inline void Info::set_has_float64_min() {
  _impl_._oneof_case_[0] = kFloat64Min;
}
inline void Info::clear_float64_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (min_case() == kFloat64Min) {
    _impl_.min_.float64_min_ = 0;
    clear_has_min();
  }
}
inline double Info::float64_min() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.float64_min)
  return _internal_float64_min();
}
inline void Info::set_float64_min(double value) {
  if (min_case() != kFloat64Min) {
    clear_min();
    set_has_float64_min();
  }
  _impl_.min_.float64_min_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Info.float64_min)
}
inline double Info::_internal_float64_min() const {
  if (min_case() == kFloat64Min) {
    return _impl_.min_.float64_min_;
  }
  return 0;
}

// uint64 uint64_max = 9;
inline bool Info::has_uint64_max() const {
  return max_case() == kUint64Max;
}
inline void Info::set_has_uint64_max() {
  _impl_._oneof_case_[1] = kUint64Max;
}
inline void Info::clear_uint64_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (max_case() == kUint64Max) {
    _impl_.max_.uint64_max_ = ::uint64_t{0u};
    clear_has_max();
  }
}
inline ::uint64_t Info::uint64_max() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.uint64_max)
  return _internal_uint64_max();
}
inline void Info::set_uint64_max(::uint64_t value) {
  if (max_case() != kUint64Max) {
    clear_max();
    set_has_uint64_max();
  }
  _impl_.max_.uint64_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Info.uint64_max)
}
inline ::uint64_t Info::_internal_uint64_max() const {
  if (max_case() == kUint64Max) {
    return _impl_.max_.uint64_max_;
  }
  return ::uint64_t{0u};
}

// int64 int64_max = 10;
inline bool Info::has_int64_max() const {
  return max_case() == kInt64Max;
}
inline void Info::set_has_int64_max() {
  _impl_._oneof_case_[1] = kInt64Max;
}
inline void Info::clear_int64_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (max_case() == kInt64Max) {
    _impl_.max_.int64_max_ = ::int64_t{0};
    clear_has_max();
  }
}
inline ::int64_t Info::int64_max() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.int64_max)
  return _internal_int64_max();
}
inline void Info::set_int64_max(::int64_t value) {
  if (max_case() != kInt64Max) {
    clear_max();
    set_has_int64_max();
  }
  _impl_.max_.int64_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Info.int64_max)
}
inline ::int64_t Info::_internal_int64_max() const {
  if (max_case() == kInt64Max) {
    return _impl_.max_.int64_max_;
  }
  return ::int64_t{0};
}

// double float64_max = 11;
inline bool Info::has_float64_max() const {
  return max_case() == kFloat64Max;
}
inline void Info::set_has_float64_max() {
  _impl_._oneof_case_[1] = kFloat64Max;
}
inline void Info::clear_float64_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (max_case() == kFloat64Max) {
    _impl_.max_.float64_max_ = 0;
    clear_has_max();
  }
}
inline double Info::float64_max() const {
  // @@protoc_insertion_point(field_get:protobuf.Info.float64_max)
  return _internal_float64_max();
}
inline void Info::set_float64_max(double value) {
  if (max_case() != kFloat64Max) {
    clear_max();
    set_has_float64_max();
  }
  _impl_.max_.float64_max_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Info.float64_max)
}
inline double Info::_internal_float64_max() const {
  if (max_case() == kFloat64Max) {
    return _impl_.max_.float64_max_;
  }
  return 0;
}

inline bool Info::has_min() const {
  return min_case() != MIN_NOT_SET;
}
inline void Info::clear_has_min() {
  _impl_._oneof_case_[0] = MIN_NOT_SET;
}
inline bool Info::has_max() const {
  return max_case() != MAX_NOT_SET;
}
inline void Info::clear_has_max() {
  _impl_._oneof_case_[1] = MAX_NOT_SET;
}
inline Info::MinCase Info::min_case() const {
  return Info::MinCase(_impl_._oneof_case_[0]);
}
inline Info::MaxCase Info::max_case() const {
  return Info::MaxCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// Metric

// optional .protobuf.Info info = 1;
inline bool Metric::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void Metric::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf::Info& Metric::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protobuf::Info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::Info&>(::protobuf::_Info_default_instance_);
}
inline const ::protobuf::Info& Metric::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Metric.info)
  return _internal_info();
}
inline void Metric::unsafe_arena_set_allocated_info(
    ::protobuf::Info* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::protobuf::Info*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.Metric.info)
}
inline ::protobuf::Info* PROTOBUF_NULLABLE Metric::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Info* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::protobuf::Info* PROTOBUF_NULLABLE Metric::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protobuf.Metric.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::protobuf::Info* PROTOBUF_NONNULL Metric::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protobuf::Info>(GetArena());
    _impl_.info_ = reinterpret_cast<::protobuf::Info*>(p);
  }
  return _impl_.info_;
}
inline ::protobuf::Info* PROTOBUF_NONNULL Metric::mutable_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::protobuf::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:protobuf.Metric.info)
  return _msg;
}
inline void Metric::set_allocated_info(::protobuf::Info* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::protobuf::Info*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Metric.info)
}

// uint64 uint64_value = 2;
inline bool Metric::has_uint64_value() const {
  return value_case() == kUint64Value;
}
inline void Metric::set_has_uint64_value() {
  _impl_._oneof_case_[0] = kUint64Value;
}
inline void Metric::clear_uint64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kUint64Value) {
    _impl_.value_.uint64_value_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t Metric::uint64_value() const {
  // @@protoc_insertion_point(field_get:protobuf.Metric.uint64_value)
  return _internal_uint64_value();
}
inline void Metric::set_uint64_value(::uint64_t value) {
  if (value_case() != kUint64Value) {
    clear_value();
    set_has_uint64_value();
  }
  _impl_.value_.uint64_value_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Metric.uint64_value)
}
inline ::uint64_t Metric::_internal_uint64_value() const {
  if (value_case() == kUint64Value) {
    return _impl_.value_.uint64_value_;
  }
  return ::uint64_t{0u};
}

// int64 int64_value = 3;
inline bool Metric::has_int64_value() const {
  return value_case() == kInt64Value;
}
inline void Metric::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void Metric::clear_int64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kInt64Value) {
    _impl_.value_.int64_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t Metric::int64_value() const {
  // @@protoc_insertion_point(field_get:protobuf.Metric.int64_value)
  return _internal_int64_value();
}
inline void Metric::set_int64_value(::int64_t value) {
  if (value_case() != kInt64Value) {
    clear_value();
    set_has_int64_value();
  }
  _impl_.value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Metric.int64_value)
}
inline ::int64_t Metric::_internal_int64_value() const {
  if (value_case() == kInt64Value) {
    return _impl_.value_.int64_value_;
  }
  return ::int64_t{0};
}

// double float64_value = 4;
inline bool Metric::has_float64_value() const {
  return value_case() == kFloat64Value;
}
inline void Metric::set_has_float64_value() {
  _impl_._oneof_case_[0] = kFloat64Value;
}
inline void Metric::clear_float64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloat64Value) {
    _impl_.value_.float64_value_ = 0;
    clear_has_value();
  }
}
inline double Metric::float64_value() const {
  // @@protoc_insertion_point(field_get:protobuf.Metric.float64_value)
  return _internal_float64_value();
}
inline void Metric::set_float64_value(double value) {
  if (value_case() != kFloat64Value) {
    clear_value();
    set_has_float64_value();
  }
  _impl_.value_.float64_value_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Metric.float64_value)
}
inline double Metric::_internal_float64_value() const {
  if (value_case() == kFloat64Value) {
    return _impl_.value_.float64_value_;
  }
  return 0;
}

// bool bool_value = 5;
inline bool Metric::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void Metric::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void Metric::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Metric::bool_value() const {
  // @@protoc_insertion_point(field_get:protobuf.Metric.bool_value)
  return _internal_bool_value();
}
inline void Metric::set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Metric.bool_value)
}
inline bool Metric::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}

inline bool Metric::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Metric::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Metric::ValueCase Metric::value_case() const {
  return Metric::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Metrics

// uint32 protocol_version = 1;
inline void Metrics::clear_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Metrics::protocol_version() const {
  // @@protoc_insertion_point(field_get:protobuf.Metrics.protocol_version)
  return _internal_protocol_version();
}
inline void Metrics::set_protocol_version(::uint32_t value) {
  _internal_set_protocol_version(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protobuf.Metrics.protocol_version)
}
inline ::uint32_t Metrics::_internal_protocol_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_version_;
}
inline void Metrics::_internal_set_protocol_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_ = value;
}

// repeated .protobuf.Metric metric = 2;
inline int Metrics::_internal_metric_size() const {
  return _internal_metric().size();
}
inline int Metrics::metric_size() const {
  return _internal_metric_size();
}
inline void Metrics::clear_metric() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_.Clear();
}
inline ::protobuf::Metric* PROTOBUF_NONNULL Metrics::mutable_metric(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf.Metrics.metric)
  return _internal_mutable_metric()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::protobuf::Metric>* PROTOBUF_NONNULL Metrics::mutable_metric()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Metrics.metric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metric();
}
inline const ::protobuf::Metric& Metrics::metric(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.Metrics.metric)
  return _internal_metric().Get(index);
}
inline ::protobuf::Metric* PROTOBUF_NONNULL Metrics::add_metric()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::protobuf::Metric* _add = _internal_mutable_metric()->Add();
  // @@protoc_insertion_point(field_add:protobuf.Metrics.metric)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf::Metric>& Metrics::metric() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf.Metrics.metric)
  return _internal_metric();
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf::Metric>&
Metrics::_internal_metric() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metric_;
}
inline ::google::protobuf::RepeatedPtrField<::protobuf::Metric>* PROTOBUF_NONNULL
Metrics::_internal_mutable_metric() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metric_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::protobuf::Kind> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::protobuf::Kind>() {
  return ::protobuf::Kind_descriptor();
}
template <>
struct is_proto_enum<::protobuf::Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::protobuf::Type>() {
  return ::protobuf::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // src_2eproto_2epb_2eh
